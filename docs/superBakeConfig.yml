---
##-----------------------------------------------------------------------
##
##
## Sample configuration file
##
##
##-----------------------------------------------------------------------

#--------------------------------------------------------------------------
#
# General information
#
#--------------------------------------------------------------------------
general:
  ## Template to use for generation. Must be superBake compatible
  defaultTemplate: superCakeStrap
  ## Must the script ask to choose for template (if false, script will use
  ## defaultTemplate).
  askForTemplate: false
  ## Value set by superBake
  #updateBootstrap: false
  ## We want to use the defined routing prefixes (core.php)
  ## If set to false, all prefixes defined in the configuration file will be created
  ## If set to true, only prefixes from core.php will be created.
  ## About routing prefixes, if you don't want a public prefix, just define empty default action for it.
  usePrefixes: true
  ## appBase plugin name (in plugin list, the name of the plugin that isn't one)
  appBase: appBase
  ## default plugins dir
  defaultPluginDir: app::Plugin


  ##
  ## Personnal informations, mostly here to use in generated headers.
  ##

  ## Your name (for file headers)
  editorName: John Doe
  ## Your email adress (for file headers)
  editorEmail: j.doe@example.com
  ## Your website
  editorWebsite: http://whoami.example.com
  ## Your website name
  editorWebsiteName: Who am I ?
  ## Your license template (find out all licenses in templates/<defaultTemplate>/commons/licenses/)
  editorLicenseTemplate: gpl3
  ## Package name
  basePackage: JDOESITE

#--------------------------------------------------------------------------
#
# Defaults
#
#--------------------------------------------------------------------------
defaults:
  ##
  ## Default plugins configuration
  ##
  plugins:
    ## Directory where the plugin must be created ("app::Plugin" or "plugins")
    pluginDir: app::Plugin
    ## Plugin have a bootstrap file (true | false)
    haveBootstrap: false
    ## Plugin have routes (true | false)
    haveRoutes: false
    ## Must we generate the models ? (true | false)
    generateModels: true
    ## Must we generate controllers ? (true | false)
    generateControllers: true
    ## Must we geenrate views ? (true | false)
    generateViews: true
    
  ##
  ## Default config for models generation
  ## (Not used yet)
  ##
  models:
    ## Model name
    name:
    ## Must we generate this model ? (true | false)
    generateModel: true
    ## Options : All data here will be avail. in the template as separate vars.
    options:
      ## Snippets to include in the model. Note that the snippet key is just here to
      ## help you, but you can use what you want.
      snippets: []
        #snippet1: path::to::snippet
        #snippet2: path::to::snippet
        #...
    ## Field used as representant of the model (ex: username for an User model)
    displayField:
    ## Array of unique associations (ex: A car item of the Cars model hasOne
    ## engine item from the Engines model)
    ## If a model name is present here, it will not be present in the baked hasMany array.
    ## @todo Must check for this, it may be useless.
    hasOne: []
      # model1
      # model2
      # model3
      # ...
    
  ##
  ## Defaults values for controllers
  ## 
  controllers:
    ## Must we generate this controller ? (true | false)
    generateController: true
    ## Do this controller have a model ?
    hasModel: true
    ## Controller name
    name:
    ## Blacklist : list of actions defined in defaults that must not be created 
    ## for the current controller
    blackList:
      ## defining empty lists.
      public: []
      admin: []
    ##
    ## Default actions to bake, by prefixes.
    ##
    ## An action can be written shortly or with more params:
    ## Short versions:
    ##  - index:
    ##  - index: snippet::path
    ## Complete version:
    ##  - index:
    ##      file: snippet::path
    ##      hasView: true|false
    ##      options:
    ##        option1: value1
    ##        option2: value2
    ## If no file name is provided as snippet superBake will try to use a
    ## snippet with the same name as the action. If none is found, a blank action
    ## is baked instead.
    actions:
      ## public prefix (non prefixed actions). If you don't want to use this prefix,
      ## just leave it blank.
      public:
        index: []
        view: []
      ## admin prefix : default CRUD actions
      admin:
        index: []
        view: []
        add: []
        edit: []
        delete:
          ## Delete action has no view.
          hasView: false
  ##
  ## Default action configuration
  ##
  action:
    hasView: true
    file:
    options: []

  ##
  ## Default configuration for views
  ## (not used yet)
  ##
  views:
    ## Views templates, by prefixes.
    ## As in actions, you have two ways to create a view.
    ## Short versions:
    ##  - index:
    ##  - index: template::path
    ## Complete version
    ##  - index:
    ##      file: template_path
    ##      generateView: true|false
    ##      options:
    ##        option1: value1
    ##        option2: value2
    ##
    ## If the template file is not found, superBake will throw an error.
    ## For more infos about the options available for each template, look at the
    ## template file.
    ## 
    ## There is a workaround about definition priorities, as for example, a field is hidden
    ## by default, there is no way now to display it specifically in your parts views.
    ## For now, your only resort is to remove is from the list, and put it back in /each/
    ## views that should use the default value. I know that's a pain...
    public:
      index:
        options:
          ## Visitors have no toolbar
          noToolbar: true
          ## These fields are hidden by default
          hiddenFields:
            id
            modified
            password
          ## The action list for each entry is not created
          hideActionsList: true
      view:
        options:
          ## Visitors have no toolbar
          noToolbar: true
          ## These fields are hidden by default
          hiddenFields:
            id
            modified
            password
          relatedDataHideActionsList: true
          hasMany_hiddenModelFields:
            Posts:
              text
              published
              modified
              id
            GalleryItems:
              file
              user_id
              gallery_id
            Users:
              password
              email
    admin:
      index:
        options:
          hiddenFields:
            id
            modified
            password
      view:
        options:
          hiddenFields:
            id
      add:
        options:
          hiddenFields:
            created
            modified
            updated
      edit:
        options:
          hiddenFields:
            created
            modified
            updated
  ##
  ## Default view config:
  ##
  view:
    file:
    generateView: true
    options:
      noToolbar: false
      additionnalJS: []
      additionnalCSS: []
  
  ##
  ## Default menu config:
  ## 
  menu:
    ## Prefixes used in generation. One by line if many, and inline if only one. Use 'public' for public prefix
    prefixes :
      public
    ## Name of the baked file. If none is provided, the menu name will be used instead (lowercase)
    fileName: 
    ## Baked file extension
    ext: ctp
    ## Target folder
    target: View::Elements::menus
    ## Template to use. If not set, menu name will be used instead (lowercase)
    template:
    ## Array of options for the template
    options: []
  

#--------------------------------------------------------------------------
#
# Plugins
#
#--------------------------------------------------------------------------
plugins:
  ## Models that must be baked in app/Model
  appBase:
    parts:
      #--------------------------------------------------------------------------
      #
      # Users
      #
      Users:
        model:
          name: User
          displayField: username
          options:
            ## Password field name
            passField: password
            ## Password check field (for add/edit actions)
            ## Check the form.ctp template before changing this.
            passCheckField: password2
          snippets:
            acls: acls::users
          generateModel: true
        controller:
          actions:
            public:
              register: users::register
              login: users::login
              logout: users::logout
        views:
          public:
            index:
              file:
              generateView: true
              options:
                noToolbar: true
            view:
              file:
              generateView: true
              options:
                noToolbar: true
                relatedDataHideActionsList: true
          admin:
            add:
              options:
                ## Overriding defaults so all fields are visible for admin
                hiddenFields:
            edit:
              options:
                ## Overriding defaults so all fields are visible for admin
                hiddenFields:
            index:
              file: index
              generateView: true
              options:
                hiddenFields:
                  - password
                  - modified
                  - created
                sortableFields:
                  - id
                  - username
            view:

      #--------------------------------------------------------------------------
      #
      # Groups
      #
      Groups:
        model:
          name: Group
          displayField: name
          options:
            snippets:
              acls: acls::roles
        controller:
          actions:
        views:
          public:
            view:
              options:
                noToolbar: true
                relatedDataHideActionsList: true
            index:
              options:
                noToolbar: true
          admin:
            view:
              options:
                hasMany_hiddenModelFields:
                  users:
                    password
                    email
                    group_id

  Blog:
    #general:
      # Directory where the plugin must be created ("app::Plugin" or "plugins")
      #pluginDir: app::Plugin
      # Plugin have a bootstrap file (true | false)
      #haveBootstrap: false
      # Plugin have routes (true | false)
      #haveRoutes: false
      # Must we generate the models ? (true | false)
      #generateModels: true
      # Must we generate controllers ? (true | false)
      #generateControllers: true
      # Must we generate views ? (true | false)
      #generateViews: true
    parts:
      Posts:
        model:
          name: Post
          displayField: title
        controller:
        views:
          public:
            view:
              options:
                noToolbar: true
                additionnalCSS:
                  "ckeditor::contents": true
                relatedDataHideActionsList: true
            index:
              file: index::articles_list
              options: 
                noToolbar: true
                contentField: text
                titleField: title
                hiddenFields:
                  published
                  user_id
                  created
                  id
                sortableFields:
                  publication_date
                licenseField: 
                  model: License
                categoryField: post_category_id
          admin:
            add:
              options:
                additionnalCSS:
                  "ckeditor::contents": true
                additionnalJS:
                  "ckeditor::ckeditor": true
            index:
              file: index
              options:
                hiddenFields:
                  modified
                  text
            edit:
              options:
                hiddenFields:
                  created
                  modified
      PostCategories:
        model:
          name: PostCategory
          displayField: name
        controller:
        views:
          public:
            index:
              options:
                noToolbar: true
            view:
              options:
                noToolbar: true
                relatedDataHideActionsList: true

  Gallery:
    parts:
      Galleries:
        model:
          name: Gallery
          displayField: name
        controller:
        views:
          public:
            index:
              options:
                noToolbar: true
            view:
              options:
                noToolbar: true
      GalleryItems:
        model:
          name: GalleryItem
          displayField: name
        controller:
          name: GalleryItems
          blackList:
            public:
              index
        views:
          public:
            index:
              options:
                noToolbar: true
            view:
              options:
                noToolbar: true
                relatedDataHideActionsList: true

  Licenses:
    parts:
      Licenses:
        model:
          name: License
          displayField: name
        controller:
        views:
          public:
            index:
              options:
                noToolbar: true
            view:
              options:
                noToolbar: true
                relatedDataHideActionsList: true
                  
        
menus:

  ## Administration menu
  Admin:
    prefixes:
      admin
    template: admin
  
  ## Menu that represents only public indexes actions in controllers
  Main:
    fileName: main
    prefixes: 
      public
    template: menu
    ext: ctp
    target: View::Elements::menus
    options:
      removedControllers:
        GalleryItems
        PostCategories
        Licenses
        Users
        Groups
      removedPlugins:
      onlyActions:
        index
      displayActionName: false
  
  ## This menu have no options, as its template just lists the pages in app/View/Pages
  Pages:
    options:
      langSupport: false # And no support yet in the template file

      
      